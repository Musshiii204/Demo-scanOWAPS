import requests
import re
import json
from datetime import datetime
import smtplib
from email.message import EmailMessage

with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

headers = {'User-Agent': 'Mozilla/5.0'}

def log_result(log, text):
    print(text)
    log.append(text)

def scan_sql_injection(url, log):
    try:
        res = requests.get(url + "' OR '1'='1", headers=headers)
        if "sql" in res.text.lower() or "syntax" in res.text.lower():
            log_result(log, "[!] SQL Injection: C√≥ th·ªÉ b·ªã l·ªói injection.")
        else:
            log_result(log, "[+] SQL Injection: Kh√¥ng ph√°t hi·ªán l·ªói.")
    except:
        log_result(log, "[-] Kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c SQLi.")

def scan_xss(url, log):
    try:
        xss = "<script>alert('xss')</script>"
        res = requests.get(url + "?q=" + xss, headers=headers)
        if xss in res.text:
            log_result(log, "[!] XSS: Payload ph·∫£n h·ªìi trong n·ªôi dung.")
        else:
            log_result(log, "[+] XSS: Kh√¥ng ph√°t hi·ªán l·ªói.")
    except:
        log_result(log, "[-] Kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c XSS.")

def check_server_info(url, log):
    try:
        res = requests.get(url, headers=headers)
        server = res.headers.get('Server')
        if server:
            log_result(log, f"[!] L·ªô th√¥ng tin Server: {server}")
        else:
            log_result(log, "[+] Kh√¥ng l·ªô th√¥ng tin Server.")
    except:
        log_result(log, "[-] Kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c Header.")

def check_sensitive_info(url, log):
    try:
        res = requests.get(url, headers=headers)
        if re.search(r'(?i)password|admin|secret|apikey|token', res.text):
            log_result(log, "[!] Ph√°t hi·ªán t·ª´ kh√≥a nh·∫°y c·∫£m trong n·ªôi dung!")
        else:
            log_result(log, "[+] Kh√¥ng ph√°t hi·ªán d·ªØ li·ªáu nh·∫°y c·∫£m.")
    except:
        log_result(log, "[-] Kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c n·ªôi dung.")

def check_common_files(url, log):
    paths = ['.env', '.git/config', 'config.php', 'debug.log']
    found = False
    for path in paths:
        try:
            full = url.rstrip('/') + '/' + path
            res = requests.get(full, headers=headers)
            if res.status_code == 200 and len(res.text.strip()) > 10:
                log_result(log, f"[!] File nh·∫°y c·∫£m t·ªìn t·∫°i: {full}")
                found = True
        except:
            continue
    if not found:
        log_result(log, "[+] Kh√¥ng ph√°t hi·ªán file nh·∫°y c·∫£m.")

def check_js_libs(url, log):
    try:
        res = requests.get(url, headers=headers)
        scripts = re.findall(r'<script[^>]+src=["\\\'](.*?)["\\\']', res.text)
        found = False
        for s in scripts:
            if any(lib in s for lib in ['jquery', 'bootstrap', 'vue', 'react']):
                log_result(log, f"[!] JS c√≥ th·ªÉ c≈©: {s}")
                found = True
        if not found:
            log_result(log, "[+] Kh√¥ng ph√°t hi·ªán th∆∞ vi·ªán JS l·ªói th·ªùi.")
    except:
        log_result(log, "[-] Kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c JS lib.")

def check_headers(url, log):
    try:
        res = requests.get(url, headers=headers)
        security = ['X-Content-Type-Options', 'X-Frame-Options', 'Content-Security-Policy']
        for h in security:
            if h not in res.headers:
                log_result(log, f"[!] Thi·∫øu header b·∫£o m·∫≠t: {h}")
        if all(h in res.headers for h in security):
            log_result(log, "[+] C√°c header b·∫£o m·∫≠t ƒë·∫ßy ƒë·ªß.")
    except:
        log_result(log, "[-] Kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c Header.")

def check_ssrf(url, log):
    try:
        payload = "http://127.0.0.1:80"
        res = requests.get(url + "?url=" + payload, headers=headers, timeout=5)
        if "localhost" in res.text.lower() or "127.0.0.1" in res.text:
            log_result(log, "[!] C√≥ th·ªÉ t·ªìn t·∫°i SSRF.")
        else:
            log_result(log, "[+] Kh√¥ng ph√°t hi·ªán SSRF.")
    except:
        log_result(log, "[+] Kh√¥ng ph·∫£n h·ªìi SSRF.")

def check_auth(url, log):
    paths = ['admin', 'login', 'user/login']
    found = False
    for p in paths:
        try:
            full = url.rstrip('/') + '/' + p
            res = requests.get(full, headers=headers)
            if res.status_code == 200 and 'password' in res.text.lower():
                log_result(log, f"[!] Trang ƒëƒÉng nh·∫≠p ph√°t hi·ªán: {full}")
                found = True
        except:
            continue
    if not found:
        log_result(log, "[+] Kh√¥ng ph√°t hi·ªán login point.")

def send_email_report(filepath):
    if not config.get("email_enabled"): return
    try:
        msg = EmailMessage()
        msg["Subject"] = "OWASP Scan Report"
        msg["From"] = config["email_from"]
        msg["To"] = config["email_to"]
        msg.set_content("G·ª≠i Ch·ªß Nh√¢n, ƒë√¢y l√† b√°o c√°o OWASP.")

        with open(filepath, "rb") as f:
            msg.add_attachment(f.read(), maintype="text", subtype="plain", filename="owasp_report.txt")

        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(config["email_from"], config["email_app_password"])
            smtp.send_message(msg)
        print("üì© ƒê√£ g·ª≠i b√°o c√°o qua Email.")
    except Exception as e:
        print("‚ùå G·ª≠i email th·∫•t b·∫°i:", e)

def send_telegram_report(filepath):
    if not config.get("telegram_enabled"): return
    try:
        url = f"https://api.telegram.org/bot{config['telegram_bot_token']}/sendDocument"
        with open(filepath, "rb") as file:
            res = requests.post(url, data={"chat_id": config["telegram_chat_id"]}, files={"document": file})
        if res.status_code == 200:
            print("üì≤ ƒê√£ g·ª≠i b√°o c√°o qua Telegram.")
        else:
            print("‚ùå G·ª≠i telegram th·∫•t b·∫°i:", res.text)
    except Exception as e:
        print("‚ùå Telegram l·ªói:", e)

def run_all_scans(url):
    log = []
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_result(log, f"=== OWASP Top 10 Scan ‚Äì {now} ===")
    log_result(log, f"Target: {url}\n")


    scan_sql_injection(url, log)
    scan_xss(url, log)
    check_server_info(url, log)
    check_sensitive_info(url, log)
    check_common_files(url, log)
    check_js_libs(url, log)
    check_headers(url, log)
    check_ssrf(url, log)
    check_auth(url, log)

    with open("owasp_report.txt", "w", encoding="utf-8") as f:
        for line in log:
            f.write(line + "\n")
    print("\n‚úÖ ƒê√£ l∆∞u v√†o owasp_report.txt")

    send_email_report("owasp_report.txt")
    send_telegram_report("owasp_report.txt")

if __name__ == "__main__":
    print("=== OWASP Top 10 Scanner - G·ª≠i b√°o c√°o t·ª± ƒë·ªông ===")
    target = input("Nh·∫≠p URL website (https://apectech.net): ").strip()
    if not target.startswith("http"):
        target = "http://" + target
    run_all_scans(target)
